---
title: "Scenario controller"
author: "Galen Holt"
format:
  html:
    df-print: paged
editor: visual
params:
  REBUILD_DATA: FALSE
---

The controller primarily sets the paths to scenarios, calls the modules, and saves the output and metadata.

```{r setup}
#| warning: false
#| message: false
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())

```

We want to have this run with `library(werptoolkitr)`. If that's changed, reinstall it from github (more robust, slower) or local (faster, needs a path).

```{r}
#| warning: false
#| message: false

## GITHUB INSTALL
# credentials::set_github_pat()
# devtools::install_github("MDBAuth/WERP_toolkit", ref = 'packaging', subdir = 'werptoolkitr', force = TRUE)

## LOCAL INSTALL- easier for quick iterations, but need a path.
# devtools::install_local("C:/Users/galen/Documents/WERP_toolkit/werptoolkitr", force = TRUE)
```

Load the package

```{r}
library(werptoolkitr)
```

## TO REBUILD

Rebuilding data is done with params. To rebuild, at the terminal in WERP_toolkit run `quarto render controller/controller_ewr_stepthrough_R.qmd -P REBUILD_DATA:TRUE`. or, to rebuild *everything*, run `quarto render -P REBUILD_DATA:TRUE` (or without the parameters if we want to re-render but not rebuild.)

**TODO** use {targets} to manage this workflow.

Set with params. But that doesn't work with interactive running, so deal with that.

```{r}
if ("params" %in% ls()) {
  REBUILD_DATA <- params$REBUILD_DATA
} else {
  REBUILD_DATA <- FALSE
}
```

## Input and output directories

Use the `testsmall/` directory for development. 6 gauges in 2 catchments.

*Normally* `scenario_dir` should point somewhere external (though keeping it inside or alongside the hydrograph data is a good idea.). But here, I'm generating test data, so I'm keeping it in the repo.

### Set directories

```{r}
# 'testsmall' is 5 years and two gauges, fast for testing the ewr tool
# 'testscenarios' is 10 years and 40+ gauges, slower but better for testing whole toolkit, especially aggregation
# hydro_dir = os.path.join(repo, 'demo_data', 'testsmall')

scenario_dir = file.path('scenario_example')

hydro_dir = file.path(scenario_dir, 'hydrographs')


```

### Format

Tell it the format- typically will be IQQM, at least for a while

```{r}
# Options
# 'Bigmod - MDBA'
# 'IQQM - NSW 10,000 years'
# 'Source - NSW (res.csv)'

model_format = 'IQQM - NSW 10,000 years'
```

### Climate info

To have an R object that works as a `dict` in python, use a named list. The names can be quoted or unquoted; keep quoted to be most like python specs.

```{r}
MINT = (100 - 0)/100
MAXT = (100 + 0 )/100
DUR = (100 - 0 )/100
DRAW = (100 -0 )/100

# hoping this works to pass a list instead of a dict
allowance = list('minThreshold' = MINT, 'maxThreshold' = MAXT, 'duration' = DUR, 'drawdown' = DRAW)

climate = 'Standard - 1911 to 2018 climate categorisation'
```

## Wrapper internals

Typically, the stuff below is wrapped. Here, I'm exposing it so we can see what's happening and where we need to tweak as formats change.

Once we have the directory and set any other needed params (e.g. point at a config), we should just click go, and auto-generate the folder structure, run the ewr, and output the results. I'm stepping through that here though and then will wrap it up.

## Set up output directories

This will typically be hidden in `prep_run_save_ewrs`, but I'm exposing the steps here for easier viewing and testing, especially as the formats change. see the Vignette for the wrapped version.

This was assuming there would be gauge-files, and now there's not. Still seems to basically work, and not really worth spending too much time until we know the actual structure we want to use. We get the information about the directory structure and files as a dict with `make_scenario_info`- if there are multiple gauges within each, they enter the dict as a 'gauge' value. If not, the 'gauge' value is confusingly just the filename, but otherwise this works. The output directory and subdirs for scenarios is created by `make_output_dir`, which also returns that outer directory location. The EWR tool needs the paths to the gauge data as a list, so `paths_gauges` just unfolds the dict to give that.

I expect all of this to change once we have a set data format.

```{r}
# Gives file locations as a dict- 
sceneinfodict = make_scenario_info(hydro_dir)
# make the output directory structure
outpath = make_output_dir(scenario_dir, sceneinfodict)
# unfold the sceneinfodict to make it easy to get the lists of paths and gauges
# everyhydro = paths_gauges(sceneinfodict)[0]

# The inner level turned into characters in R and needs to stay as a list. This is annoying but needed *only in R*
for (i in 1:length(sceneinfodict)) {
  for (j in 1:2) {
    sceneinfodict[[i]][[j]] <- as.list(sceneinfodict[[i]][[j]])
  }
}

# more list-making to work from R-Python
everyhydro = as.list(paths_gauges(sceneinfodict)[[1]])
```

## Run the ewr tool

Now we run the ewr tool. Currently I have the test data in IQQM format, but if that changes for a particular run, we'll need to pass it in.

**TODO** - How are we going to do the climate cats moving forward? - Which results do we want? - Currently summary, annual, all_events - but also all_interEvents, all_successful_events, all_successful_interEvents

Will need to ask Martin what those do.

### Loop and save

This works, but there's an issue with `outputType = 'annual'` - I'm getting an error there inside the EWR tool. Until the bug is found, skip that.

To make a `list` in python, need to have unnamed lists in R

```{r}
if (!params$REBUILD_DATA) {
  outputType = list('none')
}
if (params$REBUILD_DATA) {
  outputType = list('summary', 'all')
}


ewr_out = run_save_ewrs(everyhydro, outpath, model_format = model_format, allowance = allowance, climate = climate, outputType = outputType, datesuffix = FALSE, returnType = list('summary', 'all'))
```

# Still do to

-   config file

-   metadata

-   climate categorisation

-   allowances

-   document

-   new ewr output formats

-   parallelise? here or in EWR or both?
