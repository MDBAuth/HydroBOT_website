---
title: "Run full toolkit (saving)"
editor: visual
params:
  REBUILD_DATA: TRUE
---

This document provides a template for running through the toolkit, saving the output of each step along the way in a single document (e.g. not running the Controller, Aggregator, and Comparer as separate notebooks). Retaining everything in-memory is a very simple flip of a switch, demoed in [its own doc](WERP_toolkit_in_memory.qmd).

```{r}
#| message: false
library(werptoolkitr)
library(sf)
```

## Structure

To run the toolkit, we need to provide paths to directories for input data and output data, as well as arguments for the aggregation.

One option is to do that in a parameters file, and then treat this as a parameterised notebook.

The other option is to have this *be* the parameterising file, so we can have a bit more text around the parameterisations. These are not mutually exclusive options, just different interfaces to the code. The answer for any particular analysis likely depends on whether we're working interactively or want to fire off a large number of parallel runs.

# Parameters

## Directories

### Input and output directories

Use the `scenario_example/` directory [created](../scenario_creation/scenario_creation_more.qmd) to capture a very simple demonstration case of 46 gauges in three catchments for 10 years.

*Normally* `project_dir` should point somewhere external (though keeping it outside or alongside the hydrograph data is a good idea.). But here, I'm generating test data, so I'm keeping it in the repo.The [flow scaling example](https://github.com/MDBAuth/toolkit-flow-scaling) takes the more typical approach of pointing to data external to the repo.

```{r}
# Outer directory for scenario
project_dir = file.path('more_scenarios')

# Preexisting data
# Hydrographs (expected to exist already)
hydro_dir = file.path(project_dir, 'hydrographs')

# Generated data
# EWR outputs (will be created here in controller, read from here in aggregator)
ewr_results <- file.path(project_dir, 'module_output', 'EWR')

# outputs of aggregator. There may be multiple modules
agg_results <- file.path(project_dir, 'aggregator_output')

```

## Controller

We use the default IQQM model format and climate categorisations, though those could be passed here as well (see [controller](../controller/controller_ewr_stepthrough.qmd)).

### Control output and return

To determine what to save and what to return to the active session, use `outputType` and `returnType`, respectively. Each of them can take a list of any of `'none'`, `'summary'`, `'yearly'`, `'all_events'` `'all_successful_events'`, and `'all_successful_interEvents'`. For this demonstration I'll just use `summary` and `'yearly'` because that is needed for EWR assessment and not return anything to memory (we do that in [a different notebook](WERP_toolkit_in_memory.qmd).

```{r}
outputType <- list('summary', 'yearly')
returnType <- list('none') 
```

## Aggregator

To keep this simple, we use one aggregation list and the `read_and_agg` wrapper to only have to pass paths. See the [more detailed documents](../aggregator/aggregation_overview.qmd) for the different ways to specify those aggregation lists.

### What to aggregate

The aggregator needs to know which set of EWR outputs to use (to navigate the directory or list structure). It *should* accept multiple types, but that's not well tested, so for now just use one.

```{r}
aggType <- 'achievement'
```

We need to tell it the variable to aggregate, and any grouping variables other than the themes and spatial groups. Typically, `scenario` will be a grouper, but there may be others.

```{r}
agg_groups <- 'scenario'
agg_var <- 'ewr_achieved'
```

Do we want it to return to the active session? For this demo, nothing should return here- we're saving outputs, not returning them to the session.

```{r}
aggReturn <- FALSE
```

### How to aggregate

Fundamentally, the aggregator needs paths and two lists

-   sequence of aggregations

-   sequence of aggregation functions (can be multiple per step)

Here, I'm using an interleaved list of theme and spatial aggregations (see [the detailed docs](../aggregator/theme_space_agg.qmd) for more explanation), and applying only a single aggregation function at each step for simplicity. Those steps are specified a range of different ways to give a small taste of the flexibility here, but see the [spatial](../aggregator/spatial_agg.qmd) and [theme](../aggregator/theme_agg.qmd) docs for more examples.

The ewr codes are defined at gauges, but are intended to inform planning units. A single gauge might inform several planning units (and a single planning unit might encompass several gauges). Thus, we would typically immediately move to the planning unit scale after EWR-codes for the EWRs.

Because the planning units span multiple sdl units, but we know all the gauges are in the Namoi, Lachlan, and Macquarie, we clip the sdl units we use for aggregation. It would not be appropriate to report on others base only on the small planning unit overlaps, rather than assessing all their gauges.

```{r}
sdl_clip <- sdl_units |>    
  dplyr::filter(SWSDLName %in%                    
                  c('Lachlan', 'Macquarieâ€“Castlereagh', 'Namoi'))
```

```{r}

aggseq <- list(ewr_code = c('ewr_code_timing', 'ewr_code'),
               planning_unit = planning_units,
               env_obj =  c('ewr_code', "env_obj"),
               sdl_units = sdl_clip,
               Specific_goal = c('env_obj', "Specific_goal"),
               catchment = cewo_valleys,
               Objective = c('Specific_goal', 'Objective'),
               mdb = basin,
               target_5_year_2024 = c('Objective', 'target_5_year_2024'))


funseq <- list('CompensatingFactor',
               'ArithmeticMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean')

```

We may want to aggregate in different ways; it is possible to include multiple aggregation sequences. Here, we skip the env_obj and go straight to SDL units and then to Targets. We don't need the intervening planning unit step here becuase each gauge x planning unit combination has a row in the EWR table, and so they are appropriately weighted already going into the SDL unit if the question is just about the proportion of EWRs in the sdl unit. This would require using env_obj first if we used `causal_ewr` as-is, but we can modify the first two sheets to get straight there from ewr_codes. This is only appropriate in certain situations (just putting the EWRs in a Target bucket, ignoring their spatial definitions and environmental objectives, and associated potentail uneven weighting). We can also put this in its own directory

```{r}
aggseq_ewr <- list(ewr_code = c('ewr_code_timing', 'ewr_code'),
               sdl_units = sdl_clip,
               Target = c('ewr_code', 'Target'))


funseq_ewr <- list(c('CompensatingFactor'),
               c('ArithmeticMean'),
               c('ArithmeticMean'))

# Naively joining the first two dataframes would include planning unit info, but we've already jumped to sdl, so cut those out first.
nopue2o <- causal_ewr$ewr2obj |> 
  dplyr::select(ewr_code, env_obj) |> 
  dplyr::distinct()
nopuo2t <- causal_ewr$obj2target |> 
  dplyr::select(env_obj, Target) |> 
  dplyr::distinct()

causal_ewr2tar <- list(ewr2obj = causal_ewr$ewr2obj,
                       pooled2target = dplyr::left_join(nopue2o, 
                                                        nopuo2t) |> 
  dplyr::distinct())

sdl_target_agg_dir <- file.path(agg_results, 'sdl_target')
```

# Run the toolkit

## Controller

Running this in parallel seems to handle an issue with hanging that happens with big datasets.

```{r}
#| message: false

future::plan(future::multisession)
if (params$REBUILD_DATA) {
  ewr_out <- prep_run_save_ewrs(hydro_dir = hydro_dir, 
                                  output_parent_dir = project_dir, 
                                  outputType = outputType,
                                  returnType = returnType,
                                rparallel = TRUE)
}

```

## Aggregator

Because we're aggregating EWRs, which might be defined for multiple planning units from the same gauge, we use `group_until` to group by them until we aggregate up to larger spatial scales.

We add a `pseudo_spatial = 'planning_unit'` argument where we have a planning unit to handle the situation where the EWRs are spatially referenced to gauges, but have rows for gauges and planning units, and the gauges may affect several planning units. This uses `dplyr::left_join()` instead of a spatial join to get to the planning unit scale, and then aggregates to planning unit.

```{r}
#| error: true

if (params$REBUILD_DATA) {
  aggout <- read_and_agg(datpath = ewr_results,
             type = aggType,
             geopath = bom_basin_gauges,
             causalpath = causal_ewr,
             groupers = agg_groups,
             group_until = list(planning_unit_name = is_notpoint, gauge = is_notpoint),
             aggCols = agg_var,
             aggsequence = aggseq,
             funsequence = funseq,
             pseudo_spatial = 'planning_unit',
             saveintermediate = TRUE,
             namehistory = FALSE,
             keepAllPolys = FALSE,
             returnList = aggReturn,
             savepath = agg_results)
  
  # note this one uses the re-formulated causal relationships to get at the direct pooling.
    aggout_ewr <- read_and_agg(datpath = ewr_results,
             type = aggType,
             geopath = bom_basin_gauges,
             causalpath = causal_ewr2tar,
             groupers = agg_groups,
             group_until = list(planning_unit_name = is_notpoint, gauge = is_notpoint),
             aggCols = agg_var,
             aggsequence = aggseq_ewr,
             funsequence = funseq_ewr,
             saveintermediate = TRUE,
             namehistory = FALSE,
             keepAllPolys = FALSE,
             returnList = aggReturn,
             savepath = sdl_target_agg_dir)
}

```

It would be straightforward here to run the comparer as well, but as discussed above, there is not much reason until we settle on a couple canonical outputs.

# Quick check

To check here that we did in fact run the toolkit, we read in the data and make a quick (crude) plot.

```{r}
#| message: false
agged_data <- readRDS(file.path(agg_results, 'achievement_aggregated.rds'))

# Scenario data
scenarios <- jsonlite::read_json(file.path(hydro_dir, 
                                           'scenario_metadata.json')) |> 
  tibble::as_tibble() |> 
  tidyr::unnest(cols = everything()) |> 
  dplyr::mutate(scenario = stringr::str_c(scenario_name, '_', scenario_name))


sceneorder <- forcats::fct_reorder(scenarios$scenario, scenarios$flow_multiplier)

scene_pal <- make_pal(unique(scenarios$scenario), 
                      palette = 'ggsci::default_igv', 
                      refvals = 'base', refcols = 'black')

agged_data <- purrr::map(agged_data, \(x) dplyr::left_join(x, scenarios))
```

Note the gauge achievement here is shifted a theme scale from the sdl units, because the planning unit scale is in between- this is just here to make sure we're getting results at various spatial scales.

```{r}
# Quick plot
agged_data$sdl_units |>
    dplyr::filter(env_obj == 'NF1' &
                    flow_multiplier %in% c(0.8, 1, 1.5) &
                    flow_addition %in% c(0, 250, 6500)) |> # Need to reduce dimensionality
    plot_outcomes(outcome_col = 'ewr_achieved',
                          plot_type = 'map',
                          colorset = 'ewr_achieved',
                          pal_list = list('scico::berlin'),
                          facet_row = 'flow_addition',
                  facet_col = 'flow_multiplier',
                          underlay_list = 'basin',
                          overlay_list = list(
                            overlay = agged_data$ewr_code |> 
                              dplyr::filter(flow_multiplier %in% c(0.8, 1, 1.5) &
                                              flow_addition %in% c(0, 250, 6500)) |> 
                              dplyr::summarise(ewr_achieved = mean(ewr_achieved, na.rm = TRUE), .by = geometry),
                            pal_list = 'scico::oslo',
                            outcome_col = 'ewr_achieved',
                            clip = TRUE)) +
    ggplot2::theme(legend.position = 'bottom')
```
