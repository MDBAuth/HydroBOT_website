---
title: "WERP toolkit demonstration"
editor: visual
---

This repo provides a templates and documentation for using the toolkit in various ways. In use, we would expect a user to consider the various capabilities demonstrated here, and then develop a streamlined flow with just those parameters (at least through the aggregator step), similar to what is shown in the [full toolkit pages](full_toolkit/full_toolkit_overview.qmd) and implement that in an analysis repo for that particular set of analyses/scenarios.

The `full_toolkit` directory provides notebooks for running the full toolkit in single files, either [in memory](full_toolkit/WERP_toolkit_in_memory) or [saving each step and reading back in](full_toolkit/WERP_toolkit_save_steps.qmd). Within this repo there are also documents providing templates for each step separately (in `controller` and `aggregation` directories). These files allow exploring more of the options for calling, particularly for aggregation. There are also a few templates or examples of notebooks that are not in the toolkit flow per se, but are necessary for it (`scenario_creation` and `causal_networks`).

Toolkit flow

-   [Controller](controller/controller_overview.qmd)

    -   [in detail](controller/controller_ewr_stepthrough.qmd)

    -   [simplified](controller/controller_ewr_wrapped.qmd)

    -   Python notebooks exist, but are not maintained. Contact authors if needed.

-   [Aggregator](aggregator/aggregator_overview.qmd)

    -   [Theme and Space](aggregator/theme_space_agg.qmd)

    -   [Theme alone with more options and plot examples](aggregator/theme_agg.qmd)

    -   [Space alone with more options](aggregator/spatial_agg.qmd)- includes multilevel spatial agg into different polygons and complex aggregation functions

-   [Comparer](comparer/comparer_overview.qmd)

    -   [hydrographs](comparer/hydrographs.qmd)

    -   [bar](comparer/bar_plots.qmd), [line](comparer/line_plots.qmd), [maps](comparer/maps.qmd), and [causal networks](comparer/causal_plots.qmd) all provide plotting of outcomes from the toolkit

-   Necessary pieces but not part of the data flow in the toolkit

-   [Causal networks](causal_networks/causal_plots.qmd)

    -   Causal networks are needed for aggregation and some plotting, but are not part of the flow per-se. Much of this will be integrated into the *Comparer* module

-   [Scenario creation](scenario_creation/scenario_creation_demo.qmd)

    -   Scenario creation is not part of the toolkit, but scenarios are needed to run the toolkit

    -   These are simple demo scenarios, but useful for seeing expected formats, and to let the rest of the kit work.

    -   Python notebooks exist, but are not maintained. Contact authors if needed.

**In use, the toolkit expects that scenario hydrographs will be available and the causal networks are defined.**

![Conceptual use of the toolkit. Scenario hydrographs are expected to come from hydrologic modelling, while the toolkit ingests those, runs them through the response modules, and provides the user the ability to aggregate and synthesize in various ways.](images/Presentation1.jpg)

![Toolkit structure, showing the various components where the toolkit performs processing and allows the user to provide settings.](images/architecture.jpg)

## Dependencies

The {werptoolkitr} package needs to be installed to provide all functions used here. It also provides some necessary data for the causal network relationships, and (at least for now) canonical shapefiles that have been prepped.

Typically install it from github, which requires a github PAT because it's private (acquired with `set_github_pat`), and a `subdir` argument because the R package is nested. It may also need a `ref` argument to load a branch or commit other than main.

```{r}
#| warning: false
#| message: false
#| eval: false

# GITHUB INSTALL
credentials::set_github_pat()
devtools::install_github("MDBAuth/WERP_toolkit", ref = 'packaging', subdir = 'werptoolkitr', force = TRUE)
```

For rapid development, it can be much easier to install from local (or even just to `load_all`), but these rely on paths that aren't portable.

```{r}
#| eval: false
# LOCAL INSTALL- easier for quick iterations, but need a path.
devtools::install_local("C:/path/to/WERP_toolkit/werptoolkitr", force = TRUE)

# And for very fast iteration (no building, but exposes too much, often)
devtools::load_all("C:/path/to/WERP_toolkit/werptoolkitr")
```

Load the package

```{r}
#| eval: false
library(werptoolkitr)
```

# Additional info

More info will go here.

# Github and development

See the [repo readme](https://github.com/MDBAuth/WERP_toolkit_demo) for overall structure of the repo and additional dev info for package installation issues and development, and the [{werptoolkitr} repo](https://github.com/MDBAuth/WERP_toolkit) for the package itself.

## Using notebooks

Most notebooks that generate outputs have a `REBUILD_DATA` parameter in the yaml header that is set to FALSE to avoid overwriting data. To rebuild the data, we can manually change them to TRUE, or on a case-by-case basis at the terminal `quarto render path/to/file.qmd -P REBUILD_DATA:TRUE`, and for all files in the project (dangerous!), `quarto render -P REBUILD_DATA:TRUE`.

If there is unexpected behaviour, e.g. changes not reflected in the output, check the \_cache files and probably throw them out. Caching speeds up by not re-running code and is supposed to notice changes and re-evaluate, but sometimes hangs on when it shouldn't.
